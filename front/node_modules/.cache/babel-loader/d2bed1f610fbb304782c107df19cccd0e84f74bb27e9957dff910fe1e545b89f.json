{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/InventoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAxios } from \"../utils/useAxios\";\nimport { useAuth } from \"./AuthContext\";\nimport { Toast } from \"../utils/sweetalert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InventoryContext = /*#__PURE__*/createContext();\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    authenticatedUser\n  } = useAuth();\n  const axiosInstance = useAxios();\n  const [inventory, setInventory] = useState([]);\n  const [taskTemplate, setTaskTemplate] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Centralized error handling\n  const handleError = err => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch all items in Inventory\n  const fetchInventory = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"inventory/\");\n      setInventory(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch all items in task-templates\n  const fetchTaskTemplate = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"task-templates/\");\n      setTaskTemplate(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update the inventory\n  const updateInventory = async (inventoryId, updatedFields) => {\n    // Debug\n    console.log(\"Updating inventory data:\", updatedFields);\n    try {\n      const response = await axiosInstance.patch(`inventory/${inventoryId}/`, updatedFields);\n      setInventory(prevInventory => prevInventory.map(inventory => inventory.id === inventoryId ? response.data : inventory));\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Inventory updated successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Load inventory when user logs in or changes\n  useEffect(() => {\n    if (authenticatedUser && localStorage.getItem(\"token\")) {\n      fetchInventory();\n      fetchTaskTemplate();\n    } else {\n      setInventory([]);\n      setTaskTemplate([]);\n    }\n  }, [authenticatedUser]);\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      inventory,\n      updateInventory,\n      taskTemplate,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the InventoryContext\n_s(InventoryProvider, \"V4sG+fEUZ3infiyBmCHHJh3mTYc=\", false, function () {\n  return [useAuth, useAxios];\n});\n_c = InventoryProvider;\nexport const useInventoryContext = () => {\n  _s2();\n  return useContext(InventoryContext);\n};\n_s2(useInventoryContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAxios","useAuth","Toast","jsxDEV","_jsxDEV","InventoryContext","InventoryProvider","children","_s","authenticatedUser","axiosInstance","inventory","setInventory","taskTemplate","setTaskTemplate","loading","setLoading","error","setError","handleError","err","console","message","fetchInventory","response","get","data","fetchTaskTemplate","updateInventory","inventoryId","updatedFields","log","patch","prevInventory","map","id","fire","icon","title","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useInventoryContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/InventoryContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAxios } from \"../utils/useAxios\";\nimport { useAuth } from \"./AuthContext\";\nimport { Toast } from \"../utils/sweetalert\";\n\nconst InventoryContext = createContext();\n\nexport const InventoryProvider = ({ children }) => {\n  const { authenticatedUser } = useAuth();\n  const axiosInstance = useAxios();\n  const [inventory, setInventory] = useState([]);\n  const [taskTemplate, setTaskTemplate] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Centralized error handling\n  const handleError = (err) => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch all items in Inventory\n  const fetchInventory = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"inventory/\");\n      setInventory(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch all items in task-templates\n  const fetchTaskTemplate = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"task-templates/\");\n      setTaskTemplate(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update the inventory\n  const updateInventory = async (inventoryId, updatedFields) => {\n    // Debug\n    console.log(\"Updating inventory data:\", updatedFields);\n\n    try {\n      const response = await axiosInstance.patch(\n        `inventory/${inventoryId}/`,\n        updatedFields\n      );\n      setInventory((prevInventory) =>\n        prevInventory.map((inventory) =>\n          inventory.id === inventoryId ? response.data : inventory\n        )\n      );\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Inventory updated successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Load inventory when user logs in or changes\n  useEffect(() => {\n    if (authenticatedUser && localStorage.getItem(\"token\")) {\n      fetchInventory();\n      fetchTaskTemplate();\n    } else {\n      setInventory([]);\n      setTaskTemplate([]);\n    }\n  }, [authenticatedUser]);\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        inventory,\n        updateInventory,\n        taskTemplate,\n        loading,\n        error,\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n};\n\n// Custom hook for accessing the InventoryContext\nexport const useInventoryContext = () => useContext(InventoryContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}