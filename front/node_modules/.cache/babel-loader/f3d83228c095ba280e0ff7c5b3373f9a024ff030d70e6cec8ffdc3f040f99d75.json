{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axiosInstance from \"../utils/useAxios\";\nimport useAuth from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportContext = /*#__PURE__*/createContext();\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Centralized error handling\n  const handleError = err => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Create a new report\n  const createReport = async reportData => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.post(\"/api/reports/\", reportData);\n      setReports(prevReports => [...prevReports, response.data]);\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.put(`/api/reports/${reportId}/`, updatedFields);\n      setReports(prevReports => prevReports.map(report => report.id === reportId ? response.data : report));\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async reportId => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      await useAxios.delete(`/api/reports/${reportId}/`);\n      setReports(prevReports => prevReports.filter(report => report.id !== reportId));\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Fetch reports when the provider mounts or user changes, only if the user is authenticated\n  useEffect(() => {\n    // Fetch reports\n    const fetchReports = async () => {\n      try {\n        const response = await axiosInstance.get(\"reports/\");\n        setReports(response.data);\n      } catch (error) {\n        console.error(\"Failed to fetch reports:\", error);\n        setError(\"Failed to fetch reports. Please try again.\");\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: \"Failed to fetch reports. Please try again.\"\n        });\n      }\n    };\n    if (user) {\n      fetchReports();\n    } else {\n      setReports([]);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: {\n      reports,\n      selectedReport,\n      setSelectedReport,\n      createReport,\n      updateReport,\n      deleteReport,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the ReportContext\n_s(ReportProvider, \"hUdFve7jbKJPjPNr5GS+mmadMVc=\", false, function () {\n  return [useAuth];\n});\n_c = ReportProvider;\nexport const useReportContext = () => {\n  _s2();\n  return useContext(ReportContext);\n};\n_s2(useReportContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axiosInstance","useAuth","jsxDEV","_jsxDEV","ReportContext","ReportProvider","children","_s","user","reports","setReports","selectedReport","setSelectedReport","loading","setLoading","error","setError","handleError","err","console","message","createReport","reportData","Error","response","useAxios","post","prevReports","data","updateReport","reportId","updatedFields","put","map","report","id","deleteReport","delete","filter","fetchReports","get","Swal","fire","icon","title","text","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReportContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axiosInstance from \"../utils/useAxios\";\nimport useAuth from \"./AuthContext\";\n\nconst ReportContext = createContext();\n\nexport const ReportProvider = ({ children }) => {\n  const { user } = useAuth();\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Centralized error handling\n  const handleError = (err) => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Create a new report\n  const createReport = async (reportData) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.post(\"/api/reports/\", reportData);\n      setReports((prevReports) => [...prevReports, response.data]);\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.put(\n        `/api/reports/${reportId}/`,\n        updatedFields\n      );\n      setReports((prevReports) =>\n        prevReports.map((report) =>\n          report.id === reportId ? response.data : report\n        )\n      );\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async (reportId) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      await useAxios.delete(`/api/reports/${reportId}/`);\n      setReports((prevReports) =>\n        prevReports.filter((report) => report.id !== reportId)\n      );\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Fetch reports when the provider mounts or user changes, only if the user is authenticated\n  useEffect(() => {\n    // Fetch reports\n    const fetchReports = async () => {\n      try {\n        const response = await axiosInstance.get(\"reports/\");\n        setReports(response.data);\n      } catch (error) {\n        console.error(\"Failed to fetch reports:\", error);\n        setError(\"Failed to fetch reports. Please try again.\");\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: \"Failed to fetch reports. Please try again.\",\n        });\n      }\n    };\n\n    if (user) {\n      fetchReports();\n    } else {\n      setReports([]);\n    }\n  }, [user]);\n\n  return (\n    <ReportContext.Provider\n      value={{\n        reports,\n        selectedReport,\n        setSelectedReport,\n        createReport,\n        updateReport,\n        deleteReport,\n        loading,\n        error,\n      }}\n    >\n      {children}\n    </ReportContext.Provider>\n  );\n};\n\n// Custom hook for accessing the ReportContext\nexport const useReportContext = () => useContext(ReportContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}