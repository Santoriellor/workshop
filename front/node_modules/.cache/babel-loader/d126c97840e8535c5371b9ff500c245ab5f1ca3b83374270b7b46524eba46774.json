{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/InventoryContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n// Hooks\nimport useCRUD from \"../hooks/useCRUD\";\n// Utils\nimport withSuccessAlert from \"../utils/successAlert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InventoryContext = /*#__PURE__*/createContext();\nexport const InventoryProvider = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const {\n    data: taskTemplate,\n    fetchData: fetchTaskTemplate,\n    createItem: createTaskTemplate,\n    updateItem: updateTaskTemplate,\n    deleteItem: deleteTaskTemplate,\n    loading,\n    error\n  } = useCRUD(\"task-templates\");\n\n  // Create a task template with success alert\n  const createTaskTemplateWithAlert = withSuccessAlert(createTaskTemplate, \"Task created successfully!\");\n  // Update a task template with success alert\n  const updateTaskTemplateWithAlert = withSuccessAlert(updateTaskTemplate, \"Task updated successfully!\");\n  // Delete a task template with success alert\n  const deleteTaskTemplateWithAlert = withSuccessAlert(deleteTaskTemplate, \"Task deleted successfully!\");\n  const {\n    data: inventory,\n    fetchData: fetchInventory,\n    createItem: createInventoryPart,\n    updateItem: updateInventoryPart,\n    deleteItem: deleteInventoryPart\n    /* loading,\n    error, */\n  } = useCRUD(\"inventory\");\n\n  // Create an inventory reference with success alert\n  const createInventoryPartWithAlert = withSuccessAlert(createInventoryPart, \"Part created successfully!\");\n  // Update an inventory reference with success alert\n  const updateInventoryPartWithAlert = withSuccessAlert(updateInventoryPart, \"Part updated successfully!\");\n  // Delete an inventory reference with success alert\n  const deleteInventoryPartWithAlert = withSuccessAlert(deleteInventoryPart, \"Part deleted successfully!\");\n\n  // Fetch data when pathname change\n  useEffect(() => {\n    if (location.pathname === \"/inventory\") {\n      fetchInventory({}, \"name\");\n    }\n    if (location.pathname === \"/tasktemplate\") {\n      fetchInventory({}, \"name\");\n    }\n  }, [location.pathname]);\n  return /*#__PURE__*/_jsxDEV(InventoryContext.Provider, {\n    value: {\n      inventory,\n      fetchInventory,\n      createInventoryPartWithAlert,\n      updateInventoryPartWithAlert,\n      deleteInventoryPartWithAlert,\n      taskTemplate,\n      createTaskTemplateWithAlert,\n      updateTaskTemplateWithAlert,\n      deleteTaskTemplateWithAlert,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the InventoryContext\n_s(InventoryProvider, \"VINgRlcFYlqlVjNOdHeqVAuuiEE=\", false, function () {\n  return [useLocation, useCRUD, useCRUD];\n});\n_c = InventoryProvider;\nexport const useInventoryContext = () => {\n  _s2();\n  return useContext(InventoryContext);\n};\n_s2(useInventoryContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"InventoryProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useLocation","useCRUD","withSuccessAlert","jsxDEV","_jsxDEV","InventoryContext","InventoryProvider","children","_s","location","data","taskTemplate","fetchData","fetchTaskTemplate","createItem","createTaskTemplate","updateItem","updateTaskTemplate","deleteItem","deleteTaskTemplate","loading","error","createTaskTemplateWithAlert","updateTaskTemplateWithAlert","deleteTaskTemplateWithAlert","inventory","fetchInventory","createInventoryPart","updateInventoryPart","deleteInventoryPart","createInventoryPartWithAlert","updateInventoryPartWithAlert","deleteInventoryPartWithAlert","pathname","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useInventoryContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/InventoryContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n// Hooks\nimport useCRUD from \"../hooks/useCRUD\";\n// Utils\nimport withSuccessAlert from \"../utils/successAlert\";\n\nconst InventoryContext = createContext();\n\nexport const InventoryProvider = ({ children }) => {\n  const location = useLocation();\n  const {\n    data: taskTemplate,\n    fetchData: fetchTaskTemplate,\n    createItem: createTaskTemplate,\n    updateItem: updateTaskTemplate,\n    deleteItem: deleteTaskTemplate,\n    loading,\n    error,\n  } = useCRUD(\"task-templates\");\n\n  // Create a task template with success alert\n  const createTaskTemplateWithAlert = withSuccessAlert(\n    createTaskTemplate,\n    \"Task created successfully!\"\n  );\n  // Update a task template with success alert\n  const updateTaskTemplateWithAlert = withSuccessAlert(\n    updateTaskTemplate,\n    \"Task updated successfully!\"\n  );\n  // Delete a task template with success alert\n  const deleteTaskTemplateWithAlert = withSuccessAlert(\n    deleteTaskTemplate,\n    \"Task deleted successfully!\"\n  );\n\n  const {\n    data: inventory,\n    fetchData: fetchInventory,\n    createItem: createInventoryPart,\n    updateItem: updateInventoryPart,\n    deleteItem: deleteInventoryPart,\n    /* loading,\n    error, */\n  } = useCRUD(\"inventory\");\n\n  // Create an inventory reference with success alert\n  const createInventoryPartWithAlert = withSuccessAlert(\n    createInventoryPart,\n    \"Part created successfully!\"\n  );\n  // Update an inventory reference with success alert\n  const updateInventoryPartWithAlert = withSuccessAlert(\n    updateInventoryPart,\n    \"Part updated successfully!\"\n  );\n  // Delete an inventory reference with success alert\n  const deleteInventoryPartWithAlert = withSuccessAlert(\n    deleteInventoryPart,\n    \"Part deleted successfully!\"\n  );\n\n  // Fetch data when pathname change\n  useEffect(() => {\n    if (location.pathname === \"/inventory\") {\n      fetchInventory({}, \"name\");\n    }\n    if (location.pathname === \"/tasktemplate\") {\n      fetchInventory({}, \"name\");\n    }\n  }, [location.pathname]);\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        inventory,\n        fetchInventory,\n        createInventoryPartWithAlert,\n        updateInventoryPartWithAlert,\n        deleteInventoryPartWithAlert,\n        taskTemplate,\n        createTaskTemplateWithAlert,\n        updateTaskTemplateWithAlert,\n        deleteTaskTemplateWithAlert,\n        loading,\n        error,\n      }}\n    >\n      {children}\n    </InventoryContext.Provider>\n  );\n};\n\n// Custom hook for accessing the InventoryContext\nexport const useInventoryContext = () => useContext(InventoryContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACnE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA,OAAOC,OAAO,MAAM,kBAAkB;AACtC;AACA,OAAOC,gBAAgB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,gBAAgB,gBAAGR,aAAa,CAAC,CAAC;AAExC,OAAO,MAAMS,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM;IACJU,IAAI,EAAEC,YAAY;IAClBC,SAAS,EAAEC,iBAAiB;IAC5BC,UAAU,EAAEC,kBAAkB;IAC9BC,UAAU,EAAEC,kBAAkB;IAC9BC,UAAU,EAAEC,kBAAkB;IAC9BC,OAAO;IACPC;EACF,CAAC,GAAGpB,OAAO,CAAC,gBAAgB,CAAC;;EAE7B;EACA,MAAMqB,2BAA2B,GAAGpB,gBAAgB,CAClDa,kBAAkB,EAClB,4BACF,CAAC;EACD;EACA,MAAMQ,2BAA2B,GAAGrB,gBAAgB,CAClDe,kBAAkB,EAClB,4BACF,CAAC;EACD;EACA,MAAMO,2BAA2B,GAAGtB,gBAAgB,CAClDiB,kBAAkB,EAClB,4BACF,CAAC;EAED,MAAM;IACJT,IAAI,EAAEe,SAAS;IACfb,SAAS,EAAEc,cAAc;IACzBZ,UAAU,EAAEa,mBAAmB;IAC/BX,UAAU,EAAEY,mBAAmB;IAC/BV,UAAU,EAAEW;IACZ;AACJ;EACE,CAAC,GAAG5B,OAAO,CAAC,WAAW,CAAC;;EAExB;EACA,MAAM6B,4BAA4B,GAAG5B,gBAAgB,CACnDyB,mBAAmB,EACnB,4BACF,CAAC;EACD;EACA,MAAMI,4BAA4B,GAAG7B,gBAAgB,CACnD0B,mBAAmB,EACnB,4BACF,CAAC;EACD;EACA,MAAMI,4BAA4B,GAAG9B,gBAAgB,CACnD2B,mBAAmB,EACnB,4BACF,CAAC;;EAED;EACA9B,SAAS,CAAC,MAAM;IACd,IAAIU,QAAQ,CAACwB,QAAQ,KAAK,YAAY,EAAE;MACtCP,cAAc,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;IAC5B;IACA,IAAIjB,QAAQ,CAACwB,QAAQ,KAAK,eAAe,EAAE;MACzCP,cAAc,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;IAC5B;EACF,CAAC,EAAE,CAACjB,QAAQ,CAACwB,QAAQ,CAAC,CAAC;EAEvB,oBACE7B,OAAA,CAACC,gBAAgB,CAAC6B,QAAQ;IACxBC,KAAK,EAAE;MACLV,SAAS;MACTC,cAAc;MACdI,4BAA4B;MAC5BC,4BAA4B;MAC5BC,4BAA4B;MAC5BrB,YAAY;MACZW,2BAA2B;MAC3BC,2BAA2B;MAC3BC,2BAA2B;MAC3BJ,OAAO;MACPC;IACF,CAAE;IAAAd,QAAA,EAEDA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;;AAED;AAAA/B,EAAA,CArFaF,iBAAiB;EAAA,QACXN,WAAW,EASxBC,OAAO,EA0BPA,OAAO;AAAA;AAAAuC,EAAA,GApCAlC,iBAAiB;AAsF9B,OAAO,MAAMmC,mBAAmB,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM5C,UAAU,CAACO,gBAAgB,CAAC;AAAA;AAACqC,GAAA,CAAzDD,mBAAmB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}