{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/OwnerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport { useAxios } from \"../utils/useAxios\";\nimport { useAuth } from \"./AuthContext\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OwnerContext = /*#__PURE__*/createContext();\nexport const OwnerProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const axiosInstance = useAxios();\n  const [clients, setClients] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // SweetAlert2 config\n  const Toast = Swal.mixin({\n    toast: true,\n    position: \"top-end\",\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true,\n    didOpen: toast => {\n      toast.onmouseenter = Swal.stopTimer;\n      toast.onmouseleave = Swal.resumeTimer;\n    }\n  });\n\n  // Centralized error handling\n  const handleError = err => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch all clients\n  const fetchClients = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"clients/\");\n      setClients(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new client\n  const createClient = async clientData => {\n    try {\n      // Debug\n      console.log(\"Sending client data:\", clientData);\n      const response = await axiosInstance.post(\"clients/\", clientData);\n      setClients(prevClients => [...prevClients, response.data]);\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Client created successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a client\n  const updateClient = async (clientId, updatedFields) => {\n    // Debug\n    console.log(\"Updating client data:\", updatedFields);\n    try {\n      const response = await axiosInstance.patch(`clients/${clientId}/`, updatedFields);\n      setClients(prevClients => prevClients.map(client => client.id === clientId ? response.data : client));\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report updated successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a client\n  const deleteClient = async clientId => {\n    // Debug\n    console.log(\"Deleting client data:\", clientId);\n    try {\n      await axiosInstance.delete(`clients/${clientId}/`);\n      setClients(prevClients => prevClients.filter(client => client.id !== clientId));\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Client deleted successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Fetch clients when user logs in or changes\n  useEffect(() => {\n    if (user) fetchClients();else setClients([]); // Clear clients if no user\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: {\n      clients,\n      selectedClient,\n      setSelectedClient,\n      createClient,\n      updateClient,\n      deleteClient,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the OwnerContext\n_s(OwnerProvider, \"rmLz9hUPaBYjRnRQ2bbiZrdRWnw=\", false, function () {\n  return [useAuth, useAxios];\n});\n_c = OwnerProvider;\nexport const useOwnerContext = () => {\n  _s2();\n  return useContext(OwnerContext);\n};\n_s2(useOwnerContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"OwnerProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useAxios","useAuth","Swal","jsxDEV","_jsxDEV","OwnerContext","OwnerProvider","children","_s","user","axiosInstance","clients","setClients","selectedClient","setSelectedClient","loading","setLoading","error","setError","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","onmouseenter","stopTimer","onmouseleave","resumeTimer","handleError","err","console","message","fetchClients","response","get","data","createClient","clientData","log","post","prevClients","fire","icon","title","updateClient","clientId","updatedFields","patch","map","client","id","deleteClient","delete","filter","ClientContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useOwnerContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/OwnerContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\nimport { useAxios } from \"../utils/useAxios\";\nimport { useAuth } from \"./AuthContext\";\nimport Swal from \"sweetalert2\";\n\nconst OwnerContext = createContext();\n\nexport const OwnerProvider = ({ children }) => {\n  const { user } = useAuth();\n  const axiosInstance = useAxios();\n  const [clients, setClients] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // SweetAlert2 config\n  const Toast = Swal.mixin({\n    toast: true,\n    position: \"top-end\",\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true,\n    didOpen: (toast) => {\n      toast.onmouseenter = Swal.stopTimer;\n      toast.onmouseleave = Swal.resumeTimer;\n    },\n  });\n\n  // Centralized error handling\n  const handleError = (err) => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch all clients\n  const fetchClients = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"clients/\");\n      setClients(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new client\n  const createClient = async (clientData) => {\n    try {\n      // Debug\n      console.log(\"Sending client data:\", clientData);\n\n      const response = await axiosInstance.post(\"clients/\", clientData);\n      setClients((prevClients) => [...prevClients, response.data]);\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Client created successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a client\n  const updateClient = async (clientId, updatedFields) => {\n    // Debug\n    console.log(\"Updating client data:\", updatedFields);\n\n    try {\n      const response = await axiosInstance.patch(\n        `clients/${clientId}/`,\n        updatedFields\n      );\n      setClients((prevClients) =>\n        prevClients.map((client) =>\n          client.id === clientId ? response.data : client\n        )\n      );\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report updated successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a client\n  const deleteClient = async (clientId) => {\n    // Debug\n    console.log(\"Deleting client data:\", clientId);\n\n    try {\n      await axiosInstance.delete(`clients/${clientId}/`);\n      setClients((prevClients) =>\n        prevClients.filter((client) => client.id !== clientId)\n      );\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Client deleted successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Fetch clients when user logs in or changes\n  useEffect(() => {\n    if (user) fetchClients();\n    else setClients([]); // Clear clients if no user\n  }, [user]);\n\n  return (\n    <ClientContext.Provider\n      value={{\n        clients,\n        selectedClient,\n        setSelectedClient,\n        createClient,\n        updateClient,\n        deleteClient,\n        loading,\n        error,\n      }}\n    >\n      {children}\n    </ClientContext.Provider>\n  );\n};\n\n// Custom hook for accessing the OwnerContext\nexport const useOwnerContext = () => useContext(OwnerContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}