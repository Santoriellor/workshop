{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport useAxios from \"../utils/useAxios\";\nimport AuthContext from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportContext = /*#__PURE__*/createContext();\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Centralized error handling\n  const handleError = err => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch reports\n  const fetchReports = useCallback(async () => {\n    try {\n      if (!user) return; // Prevent API call if the user is not authenticated\n      setLoading(true);\n      const response = await useAxios.get(\"/api/reports/\");\n      setReports(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  // Create a new report\n  const createReport = async reportData => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.post(\"/api/reports/\", reportData);\n      setReports(prevReports => [...prevReports, response.data]);\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.put(`/api/reports/${reportId}/`, updatedFields);\n      setReports(prevReports => prevReports.map(report => report.id === reportId ? response.data : report));\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async reportId => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      await useAxios.delete(`/api/reports/${reportId}/`);\n      setReports(prevReports => prevReports.filter(report => report.id !== reportId));\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Fetch reports when the provider mounts or user changes, only if the user is authenticated\n  useEffect(() => {\n    if (user) {\n      fetchReports();\n    } else {\n      setReports([]);\n    }\n  }, [user, fetchReports]);\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: {\n      reports,\n      selectedReport,\n      setSelectedReport,\n      fetchReports,\n      createReport,\n      updateReport,\n      deleteReport,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the ReportContext\n_s(ReportProvider, \"MZIArO8pw8ikGsdTCM5Cc6mMCmY=\");\n_c = ReportProvider;\nexport const useReportContext = () => {\n  _s2();\n  return useContext(ReportContext);\n};\n_s2(useReportContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useAxios","AuthContext","jsxDEV","_jsxDEV","ReportContext","ReportProvider","children","_s","user","reports","setReports","selectedReport","setSelectedReport","loading","setLoading","error","setError","handleError","err","console","message","fetchReports","response","get","data","createReport","reportData","Error","post","prevReports","updateReport","reportId","updatedFields","put","map","report","id","deleteReport","delete","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReportContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport useAxios from \"../utils/useAxios\";\nimport AuthContext from \"./AuthContext\";\n\nconst ReportContext = createContext();\n\nexport const ReportProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Centralized error handling\n  const handleError = (err) => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch reports\n  const fetchReports = useCallback(async () => {\n    try {\n      if (!user) return; // Prevent API call if the user is not authenticated\n      setLoading(true);\n      const response = await useAxios.get(\"/api/reports/\");\n      setReports(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  // Create a new report\n  const createReport = async (reportData) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.post(\"/api/reports/\", reportData);\n      setReports((prevReports) => [...prevReports, response.data]);\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      const response = await useAxios.put(\n        `/api/reports/${reportId}/`,\n        updatedFields\n      );\n      setReports((prevReports) =>\n        prevReports.map((report) =>\n          report.id === reportId ? response.data : report\n        )\n      );\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async (reportId) => {\n    try {\n      if (!user) throw new Error(\"User is not authenticated\");\n      await useAxios.delete(`/api/reports/${reportId}/`);\n      setReports((prevReports) =>\n        prevReports.filter((report) => report.id !== reportId)\n      );\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Fetch reports when the provider mounts or user changes, only if the user is authenticated\n  useEffect(() => {\n    if (user) {\n      fetchReports();\n    } else {\n      setReports([]);\n    }\n  }, [user, fetchReports]);\n\n  return (\n    <ReportContext.Provider\n      value={{\n        reports,\n        selectedReport,\n        setSelectedReport,\n        fetchReports,\n        createReport,\n        updateReport,\n        deleteReport,\n        loading,\n        error,\n      }}\n    >\n      {children}\n    </ReportContext.Provider>\n  );\n};\n\n// Custom hook for accessing the ReportContext\nexport const useReportContext = () => useContext(ReportContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}