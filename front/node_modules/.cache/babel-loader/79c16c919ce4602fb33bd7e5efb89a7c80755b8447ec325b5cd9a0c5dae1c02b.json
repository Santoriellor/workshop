{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAxios } from \"../utils/useAxios\";\nimport { useAuth } from \"./AuthContext\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportContext = /*#__PURE__*/createContext();\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const axiosInstance = useAxios();\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // SweetAlert2 config\n  const Toast = Swal.mixin({\n    toast: true,\n    position: \"top-end\",\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true,\n    didOpen: toast => {\n      toast.onmouseenter = Swal.stopTimer;\n      toast.onmouseleave = Swal.resumeTimer;\n    }\n  });\n\n  // Centralized error handling\n  const handleError = err => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch all reports\n  const fetchReports = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"reports/\");\n      setReports(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new report\n  const createReport = async reportData => {\n    try {\n      // Debug\n      console.log(\"Sending report data:\", reportData);\n      const response = await axiosInstance.post(\"reports/\", reportData);\n      setReports(prevReports => [...prevReports, response.data]);\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report created successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    // Debug\n    console.log(\"Updating report data:\", updatedFields);\n    try {\n      const response = await axiosInstance.patch(`reports/${reportId}/`, updatedFields);\n      setReports(prevReports => prevReports.map(report => report.id === reportId ? response.data : report));\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report updated successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async reportId => {\n    // Debug\n    console.log(\"Deleting report data:\", reportId);\n    try {\n      await axiosInstance.delete(`reports/${reportId}/`);\n      setReports(prevReports => prevReports.filter(report => report.id !== reportId));\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report deleted successfully!\"\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Load reports when user logs in or changes\n  useEffect(() => {\n    if (user) fetchReports();else setReports([]); // Clear reports if no user\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: {\n      reports,\n      selectedReport,\n      setSelectedReport,\n      createReport,\n      updateReport,\n      deleteReport,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the ReportContext\n_s(ReportProvider, \"SkYmJQ2gTVlCf7clN+z30hOwuhw=\", false, function () {\n  return [useAuth, useAxios];\n});\n_c = ReportProvider;\nexport const useReportContext = () => {\n  _s2();\n  return useContext(ReportContext);\n};\n_s2(useReportContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAxios","useAuth","Swal","jsxDEV","_jsxDEV","ReportContext","ReportProvider","children","_s","user","axiosInstance","reports","setReports","selectedReport","setSelectedReport","loading","setLoading","error","setError","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","onmouseenter","stopTimer","onmouseleave","resumeTimer","handleError","err","console","message","fetchReports","response","get","data","createReport","reportData","log","post","prevReports","fire","icon","title","updateReport","reportId","updatedFields","patch","map","report","id","deleteReport","delete","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReportContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAxios } from \"../utils/useAxios\";\nimport { useAuth } from \"./AuthContext\";\nimport Swal from \"sweetalert2\";\n\nconst ReportContext = createContext();\n\nexport const ReportProvider = ({ children }) => {\n  const { user } = useAuth();\n  const axiosInstance = useAxios();\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // SweetAlert2 config\n  const Toast = Swal.mixin({\n    toast: true,\n    position: \"top-end\",\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true,\n    didOpen: (toast) => {\n      toast.onmouseenter = Swal.stopTimer;\n      toast.onmouseleave = Swal.resumeTimer;\n    },\n  });\n\n  // Centralized error handling\n  const handleError = (err) => {\n    console.error(err.message || \"An error occurred\");\n    setError(err.message || \"An error occurred\");\n  };\n\n  // Fetch all reports\n  const fetchReports = async () => {\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"reports/\");\n      setReports(response.data);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create a new report\n  const createReport = async (reportData) => {\n    try {\n      // Debug\n      console.log(\"Sending report data:\", reportData);\n\n      const response = await axiosInstance.post(\"reports/\", reportData);\n      setReports((prevReports) => [...prevReports, response.data]);\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report created successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    // Debug\n    console.log(\"Updating report data:\", updatedFields);\n\n    try {\n      const response = await axiosInstance.patch(\n        `reports/${reportId}/`,\n        updatedFields\n      );\n      setReports((prevReports) =>\n        prevReports.map((report) =>\n          report.id === reportId ? response.data : report\n        )\n      );\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report updated successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async (reportId) => {\n    // Debug\n    console.log(\"Deleting report data:\", reportId);\n\n    try {\n      await axiosInstance.delete(`reports/${reportId}/`);\n      setReports((prevReports) =>\n        prevReports.filter((report) => report.id !== reportId)\n      );\n      // Success notification\n      Toast.fire({\n        icon: \"success\",\n        title: \"Report deleted successfully!\",\n      });\n    } catch (err) {\n      handleError(err);\n    }\n  };\n\n  // Load reports when user logs in or changes\n  useEffect(() => {\n    if (user) fetchReports();\n    else setReports([]); // Clear reports if no user\n  }, [user]);\n\n  return (\n    <ReportContext.Provider\n      value={{\n        reports,\n        selectedReport,\n        setSelectedReport,\n        createReport,\n        updateReport,\n        deleteReport,\n        loading,\n        error,\n      }}\n    >\n      {children}\n    </ReportContext.Provider>\n  );\n};\n\n// Custom hook for accessing the ReportContext\nexport const useReportContext = () => useContext(ReportContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}