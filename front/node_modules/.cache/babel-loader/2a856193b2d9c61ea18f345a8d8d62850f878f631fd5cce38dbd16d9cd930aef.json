{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:8000\";\nexport const ReportContext = /*#__PURE__*/createContext();\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n  const token = localStorage.getItem(\"access_token\");\n  if (!token) {\n    setError(\"User is not authenticated\");\n    return null;\n  }\n\n  // Fetch reports from the server\n  const fetchReports = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/reports/`);\n      setReports(response.data);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n    }\n  };\n\n  // Create a new report\n  const createReport = async reportData => {\n    try {\n      const response = await axios.post(`${BASE_URL}/api/reports/`, reportData);\n      setReports([...reports, response.data]);\n    } catch (error) {\n      console.error(\"Error creating report:\", error);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    try {\n      // Find the existing report by ID\n      const existingReport = reports.find(report => report.id === reportId);\n      if (!existingReport) {\n        console.error(\"Report not found\");\n        return;\n      }\n\n      // Merge updatedFields with existingReport\n      const payload = {\n        ...existingReport,\n        ...updatedFields\n      };\n\n      // Send the payload to the API\n      const response = await axios.put(`http://localhost:8000/api/reports/${reportId}/`, payload);\n\n      // Update the state with the new report data\n      setReports(prevReports => prevReports.map(report => report.id === reportId ? response.data : report));\n      console.log(\"Report updated successfully:\", response.data);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error updating report:\", error);\n      console.error(\"Response data:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async reportId => {\n    try {\n      await axios.delete(`${BASE_URL}/api/reports/${reportId}/`);\n      setReports(reports.filter(r => r.id !== reportId));\n    } catch (error) {\n      console.error(\"Error deleting report:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchReports(); // Fetch reports when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: {\n      reports,\n      selectedReport,\n      setSelectedReport,\n      fetchReports,\n      createReport,\n      updateReport,\n      deleteReport\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportProvider, \"9IGMokrKo6dcq1yb08QggJdhX4w=\");\n_c = ReportProvider;\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","BASE_URL","ReportContext","ReportProvider","children","_s","reports","setReports","selectedReport","setSelectedReport","token","localStorage","getItem","setError","fetchReports","response","get","data","error","console","createReport","reportData","post","updateReport","reportId","updatedFields","existingReport","find","report","id","payload","put","prevReports","map","log","_error$response","message","deleteReport","delete","filter","r","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst BASE_URL = \"http://localhost:8000\";\n\nexport const ReportContext = createContext();\n\nexport const ReportProvider = ({ children }) => {\n  const [reports, setReports] = useState([]);\n  const [selectedReport, setSelectedReport] = useState(null);\n\n  const token = localStorage.getItem(\"access_token\");\n  if (!token) {\n    setError(\"User is not authenticated\");\n    return null;\n  }\n\n  // Fetch reports from the server\n  const fetchReports = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/reports/`);\n      setReports(response.data);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n    }\n  };\n\n  // Create a new report\n  const createReport = async (reportData) => {\n    try {\n      const response = await axios.post(`${BASE_URL}/api/reports/`, reportData);\n      setReports([...reports, response.data]);\n    } catch (error) {\n      console.error(\"Error creating report:\", error);\n    }\n  };\n\n  // Update a report\n  const updateReport = async (reportId, updatedFields) => {\n    try {\n      // Find the existing report by ID\n      const existingReport = reports.find((report) => report.id === reportId);\n\n      if (!existingReport) {\n        console.error(\"Report not found\");\n        return;\n      }\n\n      // Merge updatedFields with existingReport\n      const payload = {\n        ...existingReport,\n        ...updatedFields,\n      };\n\n      // Send the payload to the API\n      const response = await axios.put(\n        `http://localhost:8000/api/reports/${reportId}/`,\n        payload\n      );\n\n      // Update the state with the new report data\n      setReports((prevReports) =>\n        prevReports.map((report) =>\n          report.id === reportId ? response.data : report\n        )\n      );\n\n      console.log(\"Report updated successfully:\", response.data);\n    } catch (error) {\n      console.error(\"Error updating report:\", error);\n      console.error(\"Response data:\", error.response?.data || error.message);\n    }\n  };\n\n  // Delete a report\n  const deleteReport = async (reportId) => {\n    try {\n      await axios.delete(`${BASE_URL}/api/reports/${reportId}/`);\n      setReports(reports.filter((r) => r.id !== reportId));\n    } catch (error) {\n      console.error(\"Error deleting report:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchReports(); // Fetch reports when the component mounts\n  }, []);\n\n  return (\n    <ReportContext.Provider\n      value={{\n        reports,\n        selectedReport,\n        setSelectedReport,\n        fetchReports,\n        createReport,\n        updateReport,\n        deleteReport,\n      }}\n    >\n      {children}\n    </ReportContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}