{"ast":null,"code":"var _jsxFileName = \"/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// Contexts\nimport { useGlobalContext } from \"./GlobalContext\";\n// Hooks\nimport useCRUD from \"../hooks/useCRUD\";\n// Utils\nimport withSuccessAlert from \"../utils/successAlert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportContext = /*#__PURE__*/createContext();\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const {\n    selectedItem\n  } = useGlobalContext();\n  const {\n    data: reports,\n    fetchData: fetchReports,\n    createItem: createReport,\n    updateItem: updateReport,\n    deleteItem: deleteReport,\n    loading: loadingReports,\n    error: errorReports\n  } = useCRUD(\"reports\");\n\n  // Create a report with success alert\n  const createReportWithAlert = withSuccessAlert(createReport, \"Report created successfully!\");\n  // Update a report with success alert\n  const updateReportWithAlert = withSuccessAlert(updateReport, \"Report updated successfully!\", \"Report exported successfully!\");\n  // Delete a report with success alert\n  const deleteReportWithAlert = withSuccessAlert(deleteReport, \"Report deleted successfully!\");\n  const {\n    data: tasks,\n    fetchData: fetchTasks,\n    createItem: createTask,\n    updateItem: updateTask,\n    deleteItem: deleteTask,\n    loading: loadingTasks,\n    error: errorTasks\n  } = useCRUD(\"tasks\", \"reports\", selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.id);\n  const {\n    data: parts,\n    fetchData: fetchParts,\n    createItem: createPart,\n    updateItem: updatePart,\n    deleteItem: deletePart,\n    loading: loadingParts,\n    error: errorParts\n  } = useCRUD(\"parts\", \"reports\", selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.id);\n  useEffect(() => {\n    fetchReports({}, \"vehicle__brand, vehicle__model\");\n  }, []);\n\n  // Automatically fetch data when the selectedItem changes\n  useEffect(() => {\n    if (location.pathname.includes(\"reports\")) {\n      fetchTasks();\n      fetchParts();\n    }\n  }, [selectedItem]);\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: {\n      reports,\n      fetchReports,\n      loadingReports,\n      errorReports,\n      createReportWithAlert,\n      updateReportWithAlert,\n      deleteReportWithAlert,\n      tasks,\n      fetchTasks,\n      loadingTasks,\n      errorTasks,\n      createTask,\n      updateTask,\n      deleteTask,\n      parts,\n      fetchParts,\n      loadingParts,\n      errorParts,\n      createPart,\n      updatePart,\n      deletePart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for accessing the ReportContext\n_s(ReportProvider, \"BlKqvCQiGE5j/+c7IO60oZcy5po=\", false, function () {\n  return [useLocation, useGlobalContext, useCRUD, useCRUD, useCRUD];\n});\n_c = ReportProvider;\nexport const useReportContext = () => {\n  _s2();\n  return useContext(ReportContext);\n};\n_s2(useReportContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useLocation","useGlobalContext","useCRUD","withSuccessAlert","jsxDEV","_jsxDEV","ReportContext","ReportProvider","children","_s","location","selectedItem","data","reports","fetchData","fetchReports","createItem","createReport","updateItem","updateReport","deleteItem","deleteReport","loading","loadingReports","error","errorReports","createReportWithAlert","updateReportWithAlert","deleteReportWithAlert","tasks","fetchTasks","createTask","updateTask","deleteTask","loadingTasks","errorTasks","id","parts","fetchParts","createPart","updatePart","deletePart","loadingParts","errorParts","pathname","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReportContext","_s2","$RefreshReg$"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/contexts/ReportContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// Contexts\nimport { useGlobalContext } from \"./GlobalContext\";\n// Hooks\nimport useCRUD from \"../hooks/useCRUD\";\n// Utils\nimport withSuccessAlert from \"../utils/successAlert\";\n\nconst ReportContext = createContext();\n\nexport const ReportProvider = ({ children }) => {\n  const location = useLocation();\n  const { selectedItem } = useGlobalContext();\n\n  const {\n    data: reports,\n    fetchData: fetchReports,\n    createItem: createReport,\n    updateItem: updateReport,\n    deleteItem: deleteReport,\n    loading: loadingReports,\n    error: errorReports,\n  } = useCRUD(\"reports\");\n\n  // Create a report with success alert\n  const createReportWithAlert = withSuccessAlert(\n    createReport,\n    \"Report created successfully!\"\n  );\n  // Update a report with success alert\n  const updateReportWithAlert = withSuccessAlert(\n    updateReport,\n    \"Report updated successfully!\",\n    \"Report exported successfully!\"\n  );\n  // Delete a report with success alert\n  const deleteReportWithAlert = withSuccessAlert(\n    deleteReport,\n    \"Report deleted successfully!\"\n  );\n\n  const {\n    data: tasks,\n    fetchData: fetchTasks,\n    createItem: createTask,\n    updateItem: updateTask,\n    deleteItem: deleteTask,\n    loading: loadingTasks,\n    error: errorTasks,\n  } = useCRUD(\"tasks\", \"reports\", selectedItem?.id);\n\n  const {\n    data: parts,\n    fetchData: fetchParts,\n    createItem: createPart,\n    updateItem: updatePart,\n    deleteItem: deletePart,\n    loading: loadingParts,\n    error: errorParts,\n  } = useCRUD(\"parts\", \"reports\", selectedItem?.id);\n\n  useEffect(() => {\n    fetchReports({}, \"vehicle__brand, vehicle__model\");\n  }, []);\n\n  // Automatically fetch data when the selectedItem changes\n  useEffect(() => {\n    if (location.pathname.includes(\"reports\")) {\n      fetchTasks();\n      fetchParts();\n    }\n  }, [selectedItem]);\n\n  return (\n    <ReportContext.Provider\n      value={{\n        reports,\n        fetchReports,\n        loadingReports,\n        errorReports,\n        createReportWithAlert,\n        updateReportWithAlert,\n        deleteReportWithAlert,\n        tasks,\n        fetchTasks,\n        loadingTasks,\n        errorTasks,\n        createTask,\n        updateTask,\n        deleteTask,\n        parts,\n        fetchParts,\n        loadingParts,\n        errorParts,\n        createPart,\n        updatePart,\n        deletePart,\n      }}\n    >\n      {children}\n    </ReportContext.Provider>\n  );\n};\n\n// Custom hook for accessing the ReportContext\nexport const useReportContext = () => useContext(ReportContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}