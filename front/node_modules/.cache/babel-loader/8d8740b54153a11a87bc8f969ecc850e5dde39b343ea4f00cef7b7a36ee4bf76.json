{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport dayjs from \"dayjs\";\nimport { useContext } from \"react\";\nimport AuthContext from \"../contexts/AuthContext\";\nconst baseURL = \"http://127.0.0.1:8000/api\";\nconst useAxios = () => {\n  _s();\n  const {\n    authTokens,\n    setUser,\n    setAuthTokens\n  } = useContext(AuthContext);\n\n  // Create an axios instance with the base URL and headers\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${authTokens === null || authTokens === void 0 ? void 0 : authTokens.access}`\n    }\n  });\n\n  // Interceptor to handle token expiration and refreshing\n  axiosInstance.interceptors.request.use(async req => {\n    // Decode the access token and check if it's expired\n    const user = jwtDecode(authTokens.access);\n    const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n    if (!isExpired) {\n      // If the token is not expired, continue the request\n      return req;\n    }\n    try {\n      // Refresh the token if expired\n      const response = await axios.post(`${baseURL}/token/refresh/`, {\n        refresh: authTokens.refresh\n      });\n\n      // Update tokens and user state\n      localStorage.setItem(\"authTokens\", JSON.stringify(response.data));\n      setAuthTokens(response.data);\n      setUser(jwtDecode(response.data.access));\n\n      // Update the request's Authorization header\n      req.headers.Authorization = `Bearer ${response.data.access}`;\n      return req;\n    } catch (error) {\n      // Handle errors, redirect to login if refresh fails\n      console.error(\"Token refresh failed:\", error);\n      setAuthTokens(null);\n      setUser(null);\n      localStorage.removeItem(\"authTokens\");\n      throw error;\n    }\n  }, error => {\n    // Handle request errors\n    return Promise.reject(error);\n  });\n  return axiosInstance;\n};\n_s(useAxios, \"BY8wXILb98JGRtiYNfD1oywxzJ4=\");\nexport default useAxios;","map":{"version":3,"names":["axios","jwtDecode","dayjs","useContext","AuthContext","baseURL","useAxios","_s","authTokens","setUser","setAuthTokens","axiosInstance","create","headers","Authorization","access","interceptors","request","use","req","user","isExpired","unix","exp","diff","response","post","refresh","localStorage","setItem","JSON","stringify","data","error","console","removeItem","Promise","reject"],"sources":["/home/santo/Desktop/Dev/workshop/front/src/utils/useAxios.js"],"sourcesContent":["import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport dayjs from \"dayjs\";\nimport { useContext } from \"react\";\nimport AuthContext from \"../contexts/AuthContext\";\n\nconst baseURL = \"http://127.0.0.1:8000/api\";\n\nconst useAxios = () => {\n  const { authTokens, setUser, setAuthTokens } = useContext(AuthContext);\n\n  // Create an axios instance with the base URL and headers\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: { Authorization: `Bearer ${authTokens?.access}` },\n  });\n\n  // Interceptor to handle token expiration and refreshing\n  axiosInstance.interceptors.request.use(\n    async (req) => {\n      // Decode the access token and check if it's expired\n      const user = jwtDecode(authTokens.access);\n      const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n\n      if (!isExpired) {\n        // If the token is not expired, continue the request\n        return req;\n      }\n\n      try {\n        // Refresh the token if expired\n        const response = await axios.post(`${baseURL}/token/refresh/`, {\n          refresh: authTokens.refresh,\n        });\n\n        // Update tokens and user state\n        localStorage.setItem(\"authTokens\", JSON.stringify(response.data));\n        setAuthTokens(response.data);\n        setUser(jwtDecode(response.data.access));\n\n        // Update the request's Authorization header\n        req.headers.Authorization = `Bearer ${response.data.access}`;\n        return req;\n      } catch (error) {\n        // Handle errors, redirect to login if refresh fails\n        console.error(\"Token refresh failed:\", error);\n        setAuthTokens(null);\n        setUser(null);\n        localStorage.removeItem(\"authTokens\");\n        throw error;\n      }\n    },\n    (error) => {\n      // Handle request errors\n      return Promise.reject(error);\n    }\n  );\n\n  return axiosInstance;\n};\n\nexport default useAxios;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC,UAAU;IAAEC,OAAO;IAAEC;EAAc,CAAC,GAAGP,UAAU,CAACC,WAAW,CAAC;;EAEtE;EACA,MAAMO,aAAa,GAAGX,KAAK,CAACY,MAAM,CAAC;IACjCP,OAAO;IACPQ,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,MAAM;IAAG;EAC3D,CAAC,CAAC;;EAEF;EACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACpC,MAAOC,GAAG,IAAK;IACb;IACA,MAAMC,IAAI,GAAGnB,SAAS,CAACO,UAAU,CAACO,MAAM,CAAC;IACzC,MAAMM,SAAS,GAAGnB,KAAK,CAACoB,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,CAACC,IAAI,CAACtB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IAExD,IAAI,CAACmB,SAAS,EAAE;MACd;MACA,OAAOF,GAAG;IACZ;IAEA,IAAI;MACF;MACA,MAAMM,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGrB,OAAO,iBAAiB,EAAE;QAC7DsB,OAAO,EAAEnB,UAAU,CAACmB;MACtB,CAAC,CAAC;;MAEF;MACAC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACO,IAAI,CAAC,CAAC;MACjEtB,aAAa,CAACe,QAAQ,CAACO,IAAI,CAAC;MAC5BvB,OAAO,CAACR,SAAS,CAACwB,QAAQ,CAACO,IAAI,CAACjB,MAAM,CAAC,CAAC;;MAExC;MACAI,GAAG,CAACN,OAAO,CAACC,aAAa,GAAG,UAAUW,QAAQ,CAACO,IAAI,CAACjB,MAAM,EAAE;MAC5D,OAAOI,GAAG;IACZ,CAAC,CAAC,OAAOc,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CvB,aAAa,CAAC,IAAI,CAAC;MACnBD,OAAO,CAAC,IAAI,CAAC;MACbmB,YAAY,CAACO,UAAU,CAAC,YAAY,CAAC;MACrC,MAAMF,KAAK;IACb;EACF,CAAC,EACAA,KAAK,IAAK;IACT;IACA,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;EAC9B,CACF,CAAC;EAED,OAAOtB,aAAa;AACtB,CAAC;AAACJ,EAAA,CAnDID,QAAQ;AAqDd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}